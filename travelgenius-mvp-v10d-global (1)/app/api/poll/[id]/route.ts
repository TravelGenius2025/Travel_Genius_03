import { NextResponse } from 'next/server'; import { getAdminClient } from '@/lib/supabaseAdmin'
export async function GET(_:Request,{params}:{params:{id:string}}){ const admin=getAdminClient(); if(!admin) return NextResponse.json({error:'Supabase not configured'},{status:501}); const id=params.id; const { data: poll }=await admin.from('polls').select('*').eq('id',id).single(); const { data: options }=await admin.from('poll_options').select('id,text').eq('poll_id',id); const { data:votes }=await admin.from('poll_votes').select('option_id').eq('poll_id',id); const counts:Record<string,number>={}; (votes||[]).forEach((v:any)=>{ counts[v.option_id]=(counts[v.option_id]||0)+1 }); const enriched=(options||[]).map((o:any)=>({ ...o, votes: counts[o.id]||0 })); return NextResponse.json({ poll, options: enriched }) }
export async function POST(req:Request,{params}:{params:{id:string}}){ const admin=getAdminClient(); if(!admin) return NextResponse.json({error:'Supabase not configured'},{status:501}); const id=params.id; const body=await req.json().catch(()=>({})); const optionId=body?.optionId as string; if(!optionId) return NextResponse.json({error:'Missing optionId'},{status:400}); const { error }=await admin.from('poll_votes').insert({ poll_id:id, option_id: optionId }); if(error) return NextResponse.json({error:error.message},{status:500}); return NextResponse.json({ ok:true }) }
